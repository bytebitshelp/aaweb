import{s}from"./index-27f75337.js";const p={}.VITE_RAZORPAY_KEY_ID,u=()=>new Promise(e=>{const r=document.createElement("script");r.src="https://checkout.razorpay.com/v1/checkout.js",r.onload=()=>e(window.Razorpay),r.onerror=()=>e(null),document.body.appendChild(r)}),w=async()=>{const e=await u();if(!e)throw new Error("Failed to load Razorpay script");return e},g=async e=>{try{const r=await fetch("/api/create-razorpay-order",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!r.ok)throw new Error("Failed to create Razorpay order");return await r.json()}catch(r){throw console.error("Error creating Razorpay order:",r),r}},z=async(e,r)=>{try{const t=await w(),n={id:`order_${Date.now()}`,amount:e.totalAmount*100,currency:"INR",receipt:`receipt_${Date.now()}`},c={key:p,amount:n.amount,currency:n.currency,name:"Arty Affairs",description:`Order for ${e.items.length} item(s)`,order_id:n.id,prefill:{name:r.name||r.email.split("@")[0],email:r.email},theme:{color:"#44895d"},handler:async function(a){try{if((await _(a)).success)return await f(e,r,a),{success:!0,paymentId:a.razorpay_payment_id};throw new Error("Payment verification failed")}catch(o){throw console.error("Payment processing error:",o),o}},modal:{ondismiss:function(){console.log("Payment modal dismissed")}}};return new t(c).open(),new Promise((a,o)=>{window.razorpayPaymentHandler=i=>{i.success?a(i):o(new Error(i.error||"Payment failed"))}})}catch(t){throw console.error("Error processing payment:",t),t}},_=async e=>{try{return{success:!0}}catch(r){return console.error("Payment verification error:",r),{success:!1,error:r.message}}},f=async(e,r,t)=>{try{const n=e.items.map(async a=>{const{error:o}=await s.from("orders").insert([{user_id:r.id,artwork_id:a.id,quantity:a.quantity,payment_status:"Paid",order_status:"Pending",razorpay_payment_id:t.razorpay_payment_id,razorpay_order_id:t.razorpay_order_id,total_amount:a.price*a.quantity,created_at:new Date().toISOString()}]);if(o)throw o});await Promise.all(n);const c=e.items.map(async a=>{const{data:o,error:i}=await s.from("artworks").select("quantity_available, is_original").eq("artwork_id",a.id).single();if(i)throw i;const l=o.quantity_available-a.quantity,m=l<=0&&o.is_original?"Sold":"Available",{error:y}=await s.from("artworks").update({quantity_available:Math.max(0,l),status:m,updated_at:new Date().toISOString()}).eq("artwork_id",a.id);if(y)throw y});await Promise.all(c);const{error:d}=await s.from("cart").delete().eq("user_id",r.id);d&&console.error("Error clearing cart:",d)}catch(n){throw console.error("Error creating order in database:",n),n}},P=async e=>{try{const{data:r,error:t}=await s.from("orders").select(`
        *,
        artworks!inner(title, artist_name, image_url, price)
      `).eq("user_id",e).order("created_at",{ascending:!1});if(t)throw t;return r||[]}catch(r){throw console.error("Error fetching user orders:",r),r}},E=async e=>{try{const{data:r,error:t}=await s.from("orders").select(`
        *,
        artworks!inner(title, artist_name, image_url, price, category),
        users!inner(name, email)
      `).eq("order_id",e).single();if(t)throw t;return r}catch(r){throw console.error("Error fetching order details:",r),r}};export{g as createRazorpayOrder,E as getOrderDetails,P as getUserOrders,w as initializeRazorpay,z as processPayment};
